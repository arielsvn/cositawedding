{"version":3,"sources":["components/us.jpg","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","Container","Title","Regram","src","usImage","alt","Hashtag","href","target","Section","Subtitle","Address","Component","styled","div","_templateObject","_templateObject2","h1","_templateObject3","h2","_templateObject4","_templateObject5","_templateObject6","address","_templateObject7","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,64CCyCzBC,mLAlCX,OACEC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAD,uBACAJ,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAASC,IAAI,OACvBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAD,CACEC,KAAK,2CACLC,OAAO,UAFT,oBASJX,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAD,sBAEAb,EAAAC,EAAAC,cAACY,EAAD,2CAEEd,EAAAC,EAAAC,cAAA,WAFF,mBAKAF,EAAAC,EAAAC,cAAA,0CAEEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,kCAAR,qCA5BMK,aAsCZH,EAAUI,IAAOC,IAAVC,KAMPf,EAAYa,IAAOC,IAAVE,KAOTf,EAAQY,IAAOI,GAAVC,KAMLR,EAAWG,IAAOM,GAAVC,KAIRd,EAAUO,IAAOf,EAAVuB,KAQPnB,EAASW,IAAOC,IAAVQ,KAkBNX,EAAUE,IAAOU,QAAVC,KChFOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a70fb59f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/us.183ffa06.jpg\";","import React, { Component } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport usImage from './us.jpg';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Title>Ariel % Isabel</Title>\n        <Regram>\n          <img src={usImage} alt=\"us\" />\n          <div>\n            <Hashtag\n              href=\"https://www.instagram.com/cositawedding/\"\n              target=\"_blank\"\n            >\n              #cositawedding\n            </Hashtag>\n          </div>\n        </Regram>\n\n        <Section>\n          <Subtitle>SAVE THE DATE</Subtitle>\n\n          <Address>\n            SÃ¡bado, 20 de abril (4/20, yes!)\n            <br /> Filadelfia, PA\n          </Address>\n\n          <div>\n            RSVP antes del 5 de marzo a:\n            <br />\n            <a href=\"mailto:cositawedding@gmail.com\">cositawedding@gmail.com</a>\n          </div>\n        </Section>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\nconst Section = styled.div`\n  text-align: center;\n  margin-top: 1rem;\n  padding-top: 1rem;\n`;\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 10rem;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 1rem;\n  font-size: 3rem;\n`;\n\nconst Subtitle = styled.h2`\n  margin-bottom: 1rem;\n`;\n\nconst Hashtag = styled.a`\n  font-size: 1.5rem;\n  color: black !important;\n  text-decoration: none;\n  text-align: right;\n  display: inline-block;\n`;\n\nconst Regram = styled.div`\n  position: relative;\n\n  img {\n    max-width: 100%;\n  }\n\n  div {\n    position: absolute;\n    line-height: 1;\n    bottom: 3px;\n    background-color: white;\n    border-top-right-radius: 8px;\n    padding-right: 4px;\n    padding-top: 4px;\n  }\n`;\n\nconst Address = styled.address`\n  margin-bottom: 10px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}